!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/7918d19f/
AbilitiesFromYaml	data/yaml.go	/^func (y *yamlLoader) AbilitiesFromYaml(yamlFile []byte) ([]AbilityData, error) {$/;"	f	unknown:data.yamlLoader
AbilityData	data/AbilityData.go	/^type AbilityData struct {$/;"	s	package:data
Act	events/world/subject.go	/^func (s *Subject) Act(w *World) {$/;"	f	unknown:world.Subject
ActorData	data/ActorData.go	/^type ActorData struct {$/;"	s	package:data
AddItem	news.go	/^func (n *news) AddItem(p tview.Primitive) {$/;"	f	unknown:main.news
AddMember	events/world/group.go	/^func (g *Group) AddMember(p *Subject) {$/;"	f	unknown:world.Group
AddVertex	common/simpleGraph/simpleGraph.go	/^func (g *graph) AddVertex(minRequiredPossesions uint64, minRequiredCharacter uint64, cost int) {$/;"	f	unknown:simpleGraph.graph
AddVertex	events/world/goapGraph.go	/^func (g *graph) AddVertex(minRequiredPossesions uint64, minRequiredCharacter uint64, cost int) {$/;"	f	unknown:world.graph
Agent	common/simpleGraph/simpleGraph.go	/^type Agent struct {$/;"	s	package:simpleGraph
Agent	events/world/goapGraph.go	/^type Agent struct {$/;"	s	package:world
Agoraphobia	events/world/stats/stats.go	/^	Agoraphobia           = Stat(BOOL8)$/;"	c	package:stats
Alignment	data/ActorData.go	/^	Alignment    string   `yaml:"alignment"`$/;"	m	struct:data.ActorData
Alignment	data/OrganizationData.go	/^	Alignment   int    `yaml:"alignment"`$/;"	m	struct:data.GoalData
Arrive	events/world/places.go	/^func (p *place) Arrive(a ID) {$/;"	f	unknown:world.place
BAR	events/world/places.go	/^	BAR$/;"	c	package:world
BOOL0	events/world/object/object.go	/^	BOOL0 Key = iota$/;"	c	package:object
BOOL1	events/world/object/object.go	/^	BOOL1$/;"	c	package:object
BOOL10	events/world/object/object.go	/^	BOOL10$/;"	c	package:object
BOOL11	events/world/object/object.go	/^	BOOL11$/;"	c	package:object
BOOL12	events/world/object/object.go	/^	BOOL12$/;"	c	package:object
BOOL13	events/world/object/object.go	/^	BOOL13$/;"	c	package:object
BOOL14	events/world/object/object.go	/^	BOOL14$/;"	c	package:object
BOOL15	events/world/object/object.go	/^	BOOL15$/;"	c	package:object
BOOL2	events/world/object/object.go	/^	BOOL2$/;"	c	package:object
BOOL3	events/world/object/object.go	/^	BOOL3$/;"	c	package:object
BOOL4	events/world/object/object.go	/^	BOOL4$/;"	c	package:object
BOOL5	events/world/object/object.go	/^	BOOL5$/;"	c	package:object
BOOL6	events/world/object/object.go	/^	BOOL6$/;"	c	package:object
BOOL7	events/world/object/object.go	/^	BOOL7$/;"	c	package:object
BOOL8	events/world/object/object.go	/^	BOOL8$/;"	c	package:object
BOOL9	events/world/object/object.go	/^	BOOL9$/;"	c	package:object
Book	book.go	/^func Book() *book {$/;"	f	package:main
CHA	events/world/stats/stats.go	/^	CHA                   = Stat(NIBBLE20)$/;"	c	package:stats
CITY_HALL	events/world/places.go	/^	CITY_HALL$/;"	c	package:world
Car	events/world/items/items.go	/^	Car              = Item(BOOL1)$/;"	c	package:items
Content	data/MessageData.go	/^	Content string         `yaml:"content"`$/;"	m	struct:data.MessageData
Content	data/StoryData.go	/^	Content string   `yaml:"content"`$/;"	m	struct:data.StoryData
Count	book.go	/^func (b *book) Count() int {$/;"	f	unknown:main.book
Count	email.go	/^func (e *email) Count() int {$/;"	f	unknown:main.email
Count	graph.go	/^func (g *graph) Count() int {$/;"	f	unknown:main.graph
Count	news.go	/^func (n *news) Count() int {$/;"	f	unknown:main.news
Depression	events/world/stats/stats.go	/^	Depression            = Stat(BOOL9)$/;"	c	package:stats
Describe	events/world/items/items.go	/^func (i Item) Describe() (description string) {$/;"	f	unknown:items.Item
Describe	events/world/stats/stats.go	/^func (s Stat) Describe() (description string) {$/;"	f	unknown:stats.Stat
Description	data/AbilityData.go	/^	Description  string         `yaml:"description"`$/;"	m	struct:data.AbilityData
Description	data/ActorData.go	/^	Description  string   `yaml:"description"`$/;"	m	struct:data.ActorData
Description	data/OrganizationData.go	/^	Description string         `yaml:"description"`$/;"	m	struct:data.OrganizationData
Description	data/OrganizationData.go	/^	Description string `yaml:"description"`$/;"	m	struct:data.GoalData
Description	events/world/group.go	/^	Description string     `yaml:"description"`$/;"	m	struct:world.Group
Difference	common/simpleGraph/simpleGraph.go	/^func (a *Agent) Difference(b Agent) *Agent   { return a }$/;"	f	unknown:simpleGraph.Agent
Difference	events/world/goapGraph.go	/^func (a *Agent) Difference(b Agent) *Agent   { return a }$/;"	f	unknown:world.Agent
Doomsday	events/world/World.go	/^	Doomsday int$/;"	m	struct:world.World
Effects	data/AbilityData.go	/^	Effects      map[string]int `yaml:"effects"`$/;"	m	struct:data.AbilityData
Effects	data/MessageData.go	/^	Effects map[string]int `yaml:"effects"`$/;"	m	struct:data.MessageData
Effects	data/OrganizationData.go	/^	Effects     map[string]int `yaml:"effects"`$/;"	m	struct:data.OrganizationData
Email	email.go	/^func Email() *email {$/;"	f	package:main
EmailRoot	events/world/group.go	/^	EmailRoot   string     `yaml:"emailRoot"`$/;"	m	struct:world.Group
Error	events/world/subject.go	/^func (g generationError) Error() string {$/;"	f	unknown:world.generationError
EventSystem	events/eventSystem.go	/^type EventSystem struct {$/;"	s	package:events
Flex	news.go	/^	*tview.Flex$/;"	M	struct:main.column	typeref:typename:*tview.Flex
FontLoader	data/data.go	/^type FontLoader struct {$/;"	s	package:data
Fonts	data/data.go	/^func (d FontLoader) Fonts(fontSize float64, colors ...pixel.RGBA) map[pixel.RGBA]*text.Text {$/;"	f	unknown:data.FontLoader
GUN_STORE	events/world/places.go	/^	GUN_STORE$/;"	c	package:world
Generate	events/world/World.go	/^func (w *World) Generate(conf *WorldConfig) {$/;"	f	unknown:world.World
Generate	events/world/subject.go	/^func (s *Subject) Generate(ID ID) error {$/;"	f	unknown:world.Subject
Get	book.go	/^func (b *book) Get(s string) *spell {$/;"	f	unknown:main.book
Get	email.go	/^func (e *email) Get(s string) (handle string, content map[string]string, keyvalue map[string]int/;"	f	unknown:main.email
Get	events/world/object/object.go	/^func (o Object) Get(k Key) int {$/;"	f	unknown:object.Object
Get	events/world/stats/stats.go	/^func (s Stats) Get(a Stat) int {$/;"	f	unknown:stats.Stats
Get	graph.go	/^func (g *graph) Get(s string) (handle string, content map[string]string, keyvalue map[string]int/;"	f	unknown:main.graph
Get	news.go	/^func (n *news) Get(s string) (handle string, content map[string]string, keyvalue map[string]int)/;"	f	unknown:main.news
GoalData	data/OrganizationData.go	/^type GoalData struct {$/;"	s	package:data
Goals	data/OrganizationData.go	/^	Goals       []GoalData     `yaml:"goals"`$/;"	m	struct:data.OrganizationData
Goals	events/world/group.go	/^	Goals       []goal     `yaml:"goals"`$/;"	m	struct:world.Group
Graph	common/simpleGraph/simpleGraph.go	/^func Graph() *graph {$/;"	f	package:simpleGraph
Graph	events/world/goapGraph.go	/^func Graph() *graph {$/;"	f	package:world
Graph	graph.go	/^func Graph() *graph {$/;"	f	package:main
Group	events/world/group.go	/^type Group struct {$/;"	s	package:world
Groups	events/world/World.go	/^	Groups   []Group$/;"	m	struct:world.World
Gun	events/world/items/items.go	/^	Gun         Item = Item(BOOL0)$/;"	c	package:items
HIDEOUT	events/world/places.go	/^	HIDEOUT$/;"	c	package:world
HOME	events/world/places.go	/^	HOME placeEnum = iota$/;"	c	package:world
HOSPITAL	events/world/places.go	/^	HOSPITAL$/;"	c	package:world
HOUSE	events/world/places.go	/^	HOUSE$/;"	c	package:world
Has	events/world/items/items.go	/^func (i Items) Has(a Item) int {$/;"	f	unknown:items.Items
HeartProblems	events/world/stats/stats.go	/^	HeartProblems         = Stat(BOOL5)$/;"	c	package:stats
ID	events/world/stats/stats.go	/^	ID                    = Stat(UINT8_48)$/;"	c	package:stats
ID	events/world/subject.go	/^type ID uint8$/;"	t	package:world
INT	events/world/stats/stats.go	/^	INT                   = Stat(NIBBLE28)$/;"	c	package:stats
Intersection	common/simpleGraph/simpleGraph.go	/^func (a *Agent) Intersection(b Agent) *Agent { return a }$/;"	f	unknown:simpleGraph.Agent
Intersection	events/world/goapGraph.go	/^func (a *Agent) Intersection(b Agent) *Agent { return a }$/;"	f	unknown:world.Agent
IsNew	events/player.go	/^	IsNew    bool$/;"	m	struct:events.Player
Item	events/world/items/items.go	/^type Item Key$/;"	t	package:items
Items	events/world/items/items.go	/^type Items Object$/;"	t	package:items
Key	events/world/object/object.go	/^type Key uint$/;"	t	package:object
Keys	events/world/object/object.go	/^var Keys = [...]Key{$/;"	v	package:object
LawAbiding	events/world/stats/stats.go	/^	LawAbiding            = Stat(BOOL2)$/;"	c	package:stats
Leave	events/world/places.go	/^func (p *place) Leave(a ID) {$/;"	f	unknown:world.place
Len	common/simpleGraph/simpleGraph.go	/^func (f frontier) Len() int {$/;"	f	unknown:simpleGraph.frontier
Len	events/world/goapGraph.go	/^func (f frontier) Len() int {$/;"	f	unknown:world.frontier
Length	events/world/object/object.go	/^func (k Key) Length() uint {$/;"	f	unknown:object.Key
Less	common/simpleGraph/simpleGraph.go	/^func (f frontier) Less(i int, j int) bool {$/;"	f	unknown:simpleGraph.frontier
Less	events/world/goapGraph.go	/^func (f frontier) Less(i int, j int) bool {$/;"	f	unknown:world.frontier
LoadPlayer	events/player.go	/^func LoadPlayer() *Player {$/;"	f	package:events
LoadSave	data/data.go	/^func (d *data) LoadSave() *Save {$/;"	f	unknown:data.data
LoadWorld	events/world/World.go	/^func LoadWorld(file *data.Save) *World {$/;"	f	package:world
Location	events/world/stats/stats.go	/^	Location              = Stat(NIBBLE40)$/;"	c	package:stats
Loop	events/eventSystem.go	/^func (e *EventSystem) Loop(stop chan struct{}) {$/;"	f	unknown:events.EventSystem
MAX	events/world/object/object.go	/^	MAX = 0xFFFFFFFFFFFFFFFF$/;"	c	package:object
Madness	events/world/World.go	/^	Madness  int$/;"	m	struct:world.World
Mail	events/player.go	/^func (p *Player) Mail(viewer chan *w.Record) func() int {$/;"	f	unknown:events.Player
MajorMode	main.go	/^type MajorMode interface {$/;"	i	package:main
MemberofAntiCult	events/world/stats/stats.go	/^	MemberofAntiCult      = Stat(BOOL1)$/;"	c	package:stats
MemberofCult	events/world/stats/stats.go	/^	MemberofCult     Stat = Stat(BOOL0)$/;"	c	package:stats
MessageData	data/MessageData.go	/^type MessageData struct {$/;"	s	package:data
MessageRoot	data/ActorData.go	/^	MessageRoot  string   `yaml:"message_root"`$/;"	m	struct:data.ActorData
MessagesFromYaml	data/yaml.go	/^func (y *yamlLoader) MessagesFromYaml(yamlFile []byte) ([]MessageData, error) {$/;"	f	unknown:data.yamlLoader
MissingEye	events/world/stats/stats.go	/^	MissingEye            = Stat(BOOL4)$/;"	c	package:stats
MissingLimb	events/world/stats/stats.go	/^	MissingLimb           = Stat(BOOL3)$/;"	c	package:stats
Money	events/world/items/items.go	/^	Money            = Item(UINT8_48)$/;"	c	package:items
Mutex	events/eventSystem.go	/^	sync.Mutex$/;"	M	struct:events.EventSystem	typeref:typename:sync.Mutex
NIBBLE16	events/world/object/object.go	/^	NIBBLE16 Key = lastBoolBoundary + iota*4$/;"	c	package:object
NIBBLE20	events/world/object/object.go	/^	NIBBLE20$/;"	c	package:object
NIBBLE24	events/world/object/object.go	/^	NIBBLE24$/;"	c	package:object
NIBBLE28	events/world/object/object.go	/^	NIBBLE28$/;"	c	package:object
NIBBLE32	events/world/object/object.go	/^	NIBBLE32$/;"	c	package:object
NIBBLE36	events/world/object/object.go	/^	NIBBLE36$/;"	c	package:object
NIBBLE40	events/world/object/object.go	/^	NIBBLE40$/;"	c	package:object
NIBBLE44	events/world/object/object.go	/^	NIBBLE44$/;"	c	package:object
Name	data/ActorData.go	/^	Name         string   `yaml:"name"`$/;"	m	struct:data.ActorData
Name	data/OrganizationData.go	/^	Name        string         `yaml:"Name"`$/;"	m	struct:data.OrganizationData
Name	data/OrganizationData.go	/^	Name        string `yaml:"Name"`$/;"	m	struct:data.GoalData
Name	events/world/group.go	/^	Name        string     `yaml:"name"`$/;"	m	struct:world.Group
Name	events/world/places.go	/^func (p place) Name() string {$/;"	f	unknown:world.place
New	events/world/names/namer.go	/^func New(length int) []string {$/;"	f	package:names
NewData	data/data.go	/^func NewData() *data {$/;"	f	package:data
NewEventSystem	events/eventSystem.go	/^func NewEventSystem(w *w.World) *EventSystem {$/;"	f	package:events
NewPlayer	events/player.go	/^func NewPlayer(conf *PlayerConfig) *Player {$/;"	f	package:events
NewWorld	events/world/World.go	/^func NewWorld() *World {$/;"	f	package:world
NewWorldConfig	events/world/worldConfig.go	/^func NewWorldConfig() *WorldConfig {$/;"	f	package:world
NewYamlLoader	data/yaml.go	/^func NewYamlLoader(path string) *yamlLoader {$/;"	f	package:data
News	events/player.go	/^func (p *Player) News(viewer chan *w.Record) func() int {$/;"	f	unknown:events.Player
News	news.go	/^func News() *news {$/;"	f	package:main
Object	events/event.go	/^	Object  *actor$/;"	m	struct:events.event
Object	events/world/object/object.go	/^type Object uint64$/;"	t	package:object
Observe	events/world/subject.go	/^func (s *Subject) Observe(w *World) {$/;"	f	unknown:world.Subject
Options	data/MessageData.go	/^	Options []string       `yaml:"options"`$/;"	m	struct:data.MessageData
Organization	data/ActorData.go	/^	Organization string   `yaml:"organization"`$/;"	m	struct:data.ActorData
OrganizationData	data/OrganizationData.go	/^type OrganizationData struct {$/;"	s	package:data
PARK	events/world/places.go	/^	PARK$/;"	c	package:world
POLICE_STATION	events/world/places.go	/^	POLICE_STATION$/;"	c	package:world
POWER_PLANT	events/world/places.go	/^	POWER_PLANT$/;"	c	package:world
PRISON	events/world/places.go	/^	PRISON$/;"	c	package:world
Paranoia	events/world/stats/stats.go	/^	Paranoia              = Stat(BOOL7)$/;"	c	package:stats
ParseTests	common/simpleGraph/simpleGraph.go	/^func (g *graph) ParseTests(minRequiredCharacter uint64, minRequiredPossesions uint64) (ref []int/;"	f	unknown:simpleGraph.graph
ParseTests	events/world/goapGraph.go	/^func (g *graph) ParseTests(minRequiredCharacter uint64, minRequiredPossesions uint64) (ref []int/;"	f	unknown:world.graph
People	events/world/World.go	/^	People   [pop_number]Subject$/;"	m	struct:world.World
Person	events/player.go	/^	*w.Person$/;"	M	struct:events.Player	typeref:typename:*w.Person
Place	events/world/places.go	/^func (p placeEnum) Place() *place {$/;"	f	unknown:world.placeEnum
PlaceOfWork	events/world/items/items.go	/^	PlaceOfWork      = Item(NIBBLE20)$/;"	c	package:items
Plague	events/world/stats/stats.go	/^	Plague                = Stat(BOOL10)$/;"	c	package:stats
Player	events/player.go	/^type Player struct {$/;"	s	package:events
PlayerConfig	events/player.go	/^type PlayerConfig struct{}$/;"	s	package:events
Pop	common/simpleGraph/simpleGraph.go	/^func (f *frontier) Pop() interface{} {$/;"	f	unknown:simpleGraph.frontier
Pop	events/world/goapGraph.go	/^func (f *frontier) Pop() interface{} {$/;"	f	unknown:world.frontier
Progression	data/AbilityData.go	/^	Progression  string         `yaml:"progression"`$/;"	m	struct:data.AbilityData
Push	common/simpleGraph/simpleGraph.go	/^func (f *frontier) Push(x interface{}) {$/;"	f	unknown:simpleGraph.frontier
Push	events/world/goapGraph.go	/^func (f *frontier) Push(x interface{}) {$/;"	f	unknown:world.frontier
Required	common/simpleGraph/simpleGraph.go	/^func (v vertex) Required() Agent {$/;"	f	unknown:simpleGraph.vertex
Required	events/world/goapGraph.go	/^func (v vertex) Required() Agent {$/;"	f	unknown:world.vertex
Requirements	data/AbilityData.go	/^	Requirements map[string]int `yaml:"requirements"`$/;"	m	struct:data.AbilityData
SAN	events/world/stats/stats.go	/^	SAN                   = Stat(NIBBLE36)$/;"	c	package:stats
STORE	events/world/places.go	/^	STORE$/;"	c	package:world
STR	events/world/stats/stats.go	/^	STR                   = Stat(NIBBLE16)$/;"	c	package:stats
Save	data/data.go	/^type Save struct{}$/;"	s	package:data
Schizophrenia	events/world/stats/stats.go	/^	Schizophrenia         = Stat(BOOL6)$/;"	c	package:stats
Search	common/simpleGraph/simpleGraph.go	/^func (g graph) Search(searcher Agent, goal int) (paths []path) {$/;"	f	unknown:simpleGraph.graph
Search	events/world/goapGraph.go	/^func (g graph) Search(searcher Agent, goal int) (paths []path) {$/;"	f	unknown:world.graph
Set	events/world/items/items.go	/^func (i *Items) Set(a Item, newVal int) *Items {$/;"	f	unknown:items.Items
Set	events/world/object/object.go	/^func (o *Object) Set(k Key, newVal int) *Object {$/;"	f	unknown:object.Object
Set	events/world/stats/stats.go	/^func (s *Stats) Set(a Stat, newVal int) *Stats {$/;"	f	unknown:stats.Stats
SetMadness	events/world/worldConfig.go	/^func (w *WorldConfig) SetMadness(mad int) {$/;"	f	unknown:world.WorldConfig
SetYear	events/world/worldConfig.go	/^func (w *WorldConfig) SetYear(year int) {$/;"	f	unknown:world.WorldConfig
SortSearched	common/simpleGraph/simpleGraph.go	/^func (g graph) SortSearched(paths []path) (completeRoute []int) {$/;"	f	unknown:simpleGraph.graph
SortSearched	events/world/goapGraph.go	/^func (g graph) SortSearched(paths []path) (completeRoute []int) {$/;"	f	unknown:world.graph
Start	events/eventSystem.go	/^func (e *EventSystem) Start() {$/;"	f	unknown:events.EventSystem
Stat	events/world/stats/stats.go	/^type Stat Key$/;"	t	package:stats
Stats	events/world/stats/stats.go	/^type Stats Object$/;"	t	package:stats
StoriesFromYaml	data/yaml.go	/^func (y *yamlLoader) StoriesFromYaml(yamlFile []byte) ([]StoryData, error) {$/;"	f	unknown:data.yamlLoader
StoryData	data/StoryData.go	/^type StoryData struct {$/;"	s	package:data
Stress	events/world/stats/stats.go	/^	Stress                = Stat(UINT8_54)$/;"	c	package:stats
Subject	events/world/subject.go	/^type Subject struct {$/;"	s	package:world
Swap	common/simpleGraph/simpleGraph.go	/^func (f frontier) Swap(i int, j int) {$/;"	f	unknown:simpleGraph.frontier
Swap	events/world/goapGraph.go	/^func (f frontier) Swap(i int, j int) {$/;"	f	unknown:world.frontier
Tags	data/AbilityData.go	/^	Tags         []string       `yaml:"tags"`$/;"	m	struct:data.AbilityData
Tags	data/ActorData.go	/^	Tags         []string `yaml:"tags"`$/;"	m	struct:data.ActorData
Tags	data/MessageData.go	/^	Tags    string         `yaml:"tags"`$/;"	m	struct:data.MessageData
Tags	data/OrganizationData.go	/^	Tags        string         `yaml:"tags"`$/;"	m	struct:data.OrganizationData
Tags	data/OrganizationData.go	/^	Tags        string `yaml:"tags"`$/;"	m	struct:data.GoalData
Tags	data/StoryData.go	/^	Tags    []string `yaml:"tags"`$/;"	m	struct:data.StoryData
Tags	events/world/group.go	/^	Tags        string     `yaml:"tags"`$/;"	m	struct:world.Group
Test	common/simpleGraph/simpleGraph.go	/^func (g *graph) Test(location int) (hasRequiredStats func(uint64) bool, hasRequiredThings func(u/;"	f	unknown:simpleGraph.graph
Test	events/world/goapGraph.go	/^func (g *graph) Test(location int) (hasRequiredStats func(uint64) bool, hasRequiredThings func(u/;"	f	unknown:world.graph
TestLoad	data/yaml_test.go	/^func TestLoad(t *testing.T) {$/;"	f	package:data
TestSetGet	events/world/object/object_test.go	/^func TestSetGet(t *testing.T) {$/;"	f	package:object
TickRate	events/eventSystem.go	/^func (e *EventSystem) TickRate(newTickRate float64) {$/;"	f	unknown:events.EventSystem
Title	data/AbilityData.go	/^	Title        string         `yaml:"title"`$/;"	m	struct:data.AbilityData
Title	data/MessageData.go	/^	Title   string         `yaml:"title"`$/;"	m	struct:data.MessageData
Title	data/StoryData.go	/^	Title   string   `yaml:"title"`$/;"	m	struct:data.StoryData
UI	book.go	/^func (b *book) UI(nextMode func()) (title string, content tview.Primitive) {$/;"	f	unknown:main.book
UI	email.go	/^func (e *email) UI(nextMode func()) (title string, content tview.Primitive) {$/;"	f	unknown:main.email
UI	graph.go	/^func (g *graph) UI(nextMode func()) (title string, content tview.Primitive) {$/;"	f	unknown:main.graph
UI	news.go	/^func (n *news) UI(nextMode func()) (title string, content tview.Primitive) {$/;"	f	unknown:main.news
UINT8_48	events/world/object/object.go	/^	UINT8_48 Key = lastNibbleBoundary + iota*8$/;"	c	package:object
UINT8_54	events/world/object/object.go	/^	UINT8_54$/;"	c	package:object
Uniform	events/world/items/items.go	/^	Uniform          = Item(NIBBLE16)$/;"	c	package:items
Union	common/simpleGraph/simpleGraph.go	/^func (a *Agent) Union(b Agent) *Agent        { return a }$/;"	f	unknown:simpleGraph.Agent
Union	events/world/goapGraph.go	/^func (a *Agent) Union(b Agent) *Agent        { return a }$/;"	f	unknown:world.Agent
Update	book.go	/^func (b *book) Update() {$/;"	f	unknown:main.book
Update	email.go	/^func (e *email) Update() {}$/;"	f	unknown:main.email
Update	graph.go	/^func (g *graph) Update() {}$/;"	f	unknown:main.graph
Update	news.go	/^func (n *news) Update() {}$/;"	f	unknown:main.news
WIL	events/world/stats/stats.go	/^	WIL                   = Stat(NIBBLE32)$/;"	c	package:stats
WIS	events/world/stats/stats.go	/^	WIS                   = Stat(NIBBLE24)$/;"	c	package:stats
WORK_FACTORY	events/world/places.go	/^	WORK_FACTORY$/;"	c	package:world
WORK_OFFICE	events/world/places.go	/^	WORK_OFFICE$/;"	c	package:world
World	events/world/World.go	/^type World struct {$/;"	s	package:world
WorldConfig	events/world/worldConfig.go	/^type WorldConfig struct {$/;"	s	package:world
_	events/world/places.go	/^	_$/;"	c	package:world
_bool	events/world/object/object.go	/^	_bool   = 1$/;"	c	package:object
_nibble	events/world/object/object.go	/^	_nibble = 4$/;"	c	package:object
_uint8	events/world/object/object.go	/^	_uint8  = 8$/;"	c	package:object
app	main.go	/^var app *tview.Application$/;"	v	package:main
assignGroups	events/world/World.go	/^func (w *World) assignGroups() {$/;"	f	unknown:world.World
book	book.go	/^type book struct {$/;"	s	package:main
chapterBreak	util.go	/^func chapterBreak(p *tview.Box) string {$/;"	f	package:main
chapter_break	util.go	/^const chapter_break = "\\u00a7"$/;"	c	package:main
character	common/simpleGraph/simpleGraph.go	/^	character  uint64$/;"	m	struct:simpleGraph.Agent
character	events/world/goapGraph.go	/^	character  uint64$/;"	m	struct:world.Agent
checkAllowed	events/world/places.go	/^func (p *place) checkAllowed(a ID) bool {$/;"	f	unknown:world.place
checkFit	events/world/object/object.go	/^func (k Key) checkFit(newVal int) int {$/;"	f	unknown:object.Key
checkIfHasReccord	events/event.go	/^func (a *event) checkIfHasReccord() {}$/;"	f	unknown:events.event
column	news.go	/^type column struct {$/;"	s	package:main
column_count	news.go	/^const column_count = 3$/;"	c	package:main
columns	news.go	/^	columns [column_count]column$/;"	m	struct:main.news
content	news.go	/^	content string$/;"	m	struct:main.story
cost	common/simpleGraph/simpleGraph.go	/^	cost                  int$/;"	m	struct:simpleGraph.vertex
cost	common/simpleGraph/simpleGraph.go	/^	cost   int$/;"	m	struct:simpleGraph.node
cost	events/world/goapGraph.go	/^	cost                  int$/;"	m	struct:world.vertex
cost	events/world/goapGraph.go	/^	cost   int$/;"	m	struct:world.node
count	news.go	/^	count int$/;"	m	struct:main.column
data	data/AbilityData.go	/^package data$/;"	p
data	data/ActorData.go	/^package data$/;"	p
data	data/MessageData.go	/^package data$/;"	p
data	data/OrganizationData.go	/^package data$/;"	p
data	data/StoryData.go	/^package data$/;"	p
data	data/data.go	/^package data$/;"	p
data	data/data.go	/^type data struct {$/;"	s	package:data
data	data/yaml.go	/^package data$/;"	p
data	data/yaml_test.go	/^package data$/;"	p
email	email.go	/^type email struct{}$/;"	s	package:main
emails	events/world/names/emails.go	/^var emails = []string{$/;"	v	package:names
event	events/event.go	/^type event struct {$/;"	s	package:events
events	events/event.go	/^package events$/;"	p
events	events/eventSystem.go	/^package events$/;"	p
events	events/player.go	/^package events$/;"	p
feed	events/player.go	/^func (p *Player) feed(viewer chan *w.Record, list []*w.Record) func() int {$/;"	f	unknown:events.Player
femaleFirstNames	events/world/names/names.go	/^var femaleFirstNames = []string{$/;"	v	package:names
formatSpell	book.go	/^func (b *book) formatSpell(s *spell) string {$/;"	f	unknown:main.book
formatStory	news.go	/^func (n *news) formatStory(s story) string {$/;"	f	unknown:main.news
friends	events/world/subject.go	/^	friends [max_relationships]ID$/;"	m	struct:world.Subject
frontier	common/simpleGraph/simpleGraph.go	/^type frontier []node$/;"	t	package:simpleGraph
frontier	events/world/goapGraph.go	/^type frontier []node$/;"	t	package:world
generateRelationships	events/world/World.go	/^func (w *World) generateRelationships() {$/;"	f	unknown:world.World
generationError	events/world/subject.go	/^type generationError string$/;"	t	package:world
goal	events/world/goals.go	/^type goal struct{}$/;"	s	package:world
goal	events/world/subject.go	/^	goal    int$/;"	m	struct:world.Subject
graph	common/simpleGraph/simpleGraph.go	/^type graph []vertex$/;"	t	package:simpleGraph
graph	events/world/World.go	/^	graph$/;"	M	struct:world.World	typeref:typename:graph
graph	events/world/goapGraph.go	/^type graph []vertex$/;"	t	package:world
graph	graph.go	/^type graph struct{}$/;"	s	package:main
handle	book.go	/^	handle            string$/;"	m	struct:main.spell
instantiateActor	events/eventSystem.go	/^func (e *EventSystem) instantiateActor(input *actor) (*actor, error) {$/;"	f	unknown:events.EventSystem
instantiateRecord	events/eventSystem.go	/^func (e *EventSystem) instantiateRecord(input *w.Record) *w.Record {$/;"	f	unknown:events.EventSystem
items	events/world/items/items.go	/^package items$/;"	p
items	events/world/subject.go	/^	items   items.Items$/;"	m	struct:world.Subject
keyValue	book.go	/^	keyValue          map[string]int$/;"	m	struct:main.spell
lastBoolBoundary	events/world/object/object.go	/^	lastBoolBoundary$/;"	c	package:object
lastNibbleBoundary	events/world/object/object.go	/^	lastNibbleBoundary$/;"	c	package:object
loadTTF	data/data.go	/^func (d FontLoader) loadTTF(path string, size float64) (font.Face, error) {$/;"	f	unknown:data.FontLoader
long_description	book.go	/^	long_description  string$/;"	m	struct:main.spell
madness	events/world/worldConfig.go	/^	madness int$/;"	m	struct:world.WorldConfig
mailBox	events/player.go	/^	mailBox  []*w.Record$/;"	m	struct:events.Player
main	book.go	/^package main$/;"	p
main	email.go	/^package main$/;"	p
main	graph.go	/^package main$/;"	p
main	main.go	/^func main() {$/;"	f	package:main
main	main.go	/^package main$/;"	p
main	news.go	/^package main$/;"	p
main	util.go	/^package main$/;"	p
maleFirstNames	events/world/names/names.go	/^var maleFirstNames = []string{$/;"	v	package:names
maxChar	common/simpleGraph/simpleGraph.go	/^	maxChar       = 0xFFFFFFFFFFF$/;"	c	package:simpleGraph
maxChar	events/world/goapGraph.go	/^	maxChar       = 0xFFFFFFFFFFF$/;"	c	package:world
maxPossession	common/simpleGraph/simpleGraph.go	/^	maxPossession = 0xFFFFFFFFFFF$/;"	c	package:simpleGraph
maxPossession	events/world/goapGraph.go	/^	maxPossession = 0xFFFFFFFFFFF$/;"	c	package:world
max_enemies	events/world/World.go	/^	max_enemies       = 3$/;"	c	package:world
max_friends	events/world/World.go	/^	max_friends       = 4$/;"	c	package:world
max_hate	events/world/World.go	/^	max_hate          = 256$/;"	c	package:world
max_love	events/world/World.go	/^	max_love          = 256$/;"	c	package:world
max_relationships	events/world/World.go	/^	max_relationships = 8$/;"	c	package:world
members	events/world/group.go	/^	members     []*Subject `yaml:"members"`$/;"	m	struct:world.Group
minRequiredCharacter	common/simpleGraph/simpleGraph.go	/^	minRequiredCharacter  uint64$/;"	m	struct:simpleGraph.vertex
minRequiredCharacter	events/world/goapGraph.go	/^	minRequiredCharacter  uint64$/;"	m	struct:world.vertex
minRequiredPossesions	common/simpleGraph/simpleGraph.go	/^	minRequiredPossesions uint64$/;"	m	struct:simpleGraph.vertex
minRequiredPossesions	events/world/goapGraph.go	/^	minRequiredPossesions uint64$/;"	m	struct:world.vertex
name	events/world/places.go	/^	name            string$/;"	m	struct:world.place
names	book.go	/^	names  *tview.List$/;"	m	struct:main.book
names	events/world/names/emails.go	/^package names$/;"	p
names	events/world/names/namer.go	/^package names$/;"	p
names	events/world/names/names.go	/^package names$/;"	p
neighbours	common/simpleGraph/simpleGraph.go	/^	neighbours            []int$/;"	m	struct:simpleGraph.vertex
neighbours	events/world/goapGraph.go	/^	neighbours            []int$/;"	m	struct:world.vertex
news	news.go	/^type news struct {$/;"	s	package:main
newsFeed	events/player.go	/^	newsFeed []*w.Record$/;"	m	struct:events.Player
node	common/simpleGraph/simpleGraph.go	/^type node struct {$/;"	s	package:simpleGraph
node	events/world/goapGraph.go	/^type node struct {$/;"	s	package:world
numberOfEnemies	events/world/World.go	/^func (w *World) numberOfEnemies(p Subject) int {$/;"	f	unknown:world.World
numberOfFamilly	events/world/World.go	/^func (w *World) numberOfFamilly(p Subject) int {$/;"	f	unknown:world.World
numberOfFriends	events/world/World.go	/^func (w *World) numberOfFriends(p Subject) int {$/;"	f	unknown:world.World
object	events/world/object/object.go	/^package object$/;"	p
object	events/world/object/object_test.go	/^package object$/;"	p
pages	book.go	/^	pages  *tview.Pages$/;"	m	struct:main.book
parent	common/simpleGraph/simpleGraph.go	/^	parent *node$/;"	m	struct:simpleGraph.node
parent	events/world/goapGraph.go	/^	parent *node$/;"	m	struct:world.node
path	common/simpleGraph/simpleGraph.go	/^	path           []int$/;"	m	struct:simpleGraph.path
path	common/simpleGraph/simpleGraph.go	/^type path struct {$/;"	s	package:simpleGraph
path	data/yaml.go	/^	path string$/;"	m	struct:data.yamlLoader
path	events/world/goapGraph.go	/^	path           []int$/;"	m	struct:world.path
path	events/world/goapGraph.go	/^type path struct {$/;"	s	package:world
pathCost	common/simpleGraph/simpleGraph.go	/^	pathCost       int$/;"	m	struct:simpleGraph.path
pathCost	events/world/goapGraph.go	/^	pathCost       int$/;"	m	struct:world.path
place	events/world/places.go	/^type place struct {$/;"	s	package:world
placeEnum	events/world/places.go	/^type placeEnum int$/;"	t	package:world
places	events/world/places.go	/^var places = [16]place{$/;"	v	package:world
plain	book.go	/^	plain  *tview.TextView$/;"	m	struct:main.book
pop_number	events/world/World.go	/^	pop_number        = 256$/;"	c	package:world
possesions	common/simpleGraph/simpleGraph.go	/^	possesions uint64$/;"	m	struct:simpleGraph.Agent
possesions	events/world/goapGraph.go	/^	possesions uint64$/;"	m	struct:world.Agent
predefinedVertexes	common/simpleGraph/simpleGraph.go	/^var predefinedVertexes = []vertex{}$/;"	v	package:simpleGraph
predefinedVertexes	events/world/goapGraph.go	/^var predefinedVertexes = []vertex{}$/;"	v	package:world
relationship	events/world/World.go	/^func (w *World) relationship(a int, b int, bias int) int {$/;"	f	unknown:world.World
relationship	events/world/World.go	/^type relationship struct {$/;"	s	package:world
restrictionFunc	events/world/places.go	/^	restrictionFunc func(i ID)$/;"	m	struct:world.place
resultingAgent	common/simpleGraph/simpleGraph.go	/^	resultingAgent Agent$/;"	m	struct:simpleGraph.path
resultingAgent	events/world/goapGraph.go	/^	resultingAgent Agent$/;"	m	struct:world.path
run	main.go	/^func run() {$/;"	f	package:main
s	events/event.go	/^	s\/github.com\/nowakf\/undefined_behaviourject *actor$/;"	m	struct:events.event
self	common/simpleGraph/simpleGraph.go	/^	self   int$/;"	m	struct:simpleGraph.node
self	events/world/goapGraph.go	/^	self   int$/;"	m	struct:world.node
short_description	book.go	/^	short_description string$/;"	m	struct:main.spell
simpleGraph	common/simpleGraph/simpleGraph.go	/^package simpleGraph$/;"	p
spell	book.go	/^type spell struct {$/;"	s	package:main
spells	book.go	/^	spells map[string]*spell$/;"	m	struct:main.book
stats	events/world/stats/stats.go	/^package stats$/;"	p
stats	events/world/subject.go	/^	stats   stats.Stats$/;"	m	struct:world.Subject
stories	news.go	/^	stories []story$/;"	m	struct:main.news
story	news.go	/^type story struct {$/;"	s	package:main
success	events/event.go	/^	success bool$/;"	m	struct:events.event
surnames	events/world/names/names.go	/^var surnames = []string{$/;"	v	package:names
table	book.go	/^	table  *tview.Table$/;"	m	struct:main.book
tags	events/event.go	/^	tags    []string \/\/e.g "theft", "arson", "uncanny" etc$/;"	m	struct:events.event
testSpells	book.go	/^var testSpells = map[string]*spell{$/;"	v	package:main
testStories	news.go	/^var testStories = []story{$/;"	v	package:main
tickRate	events/eventSystem.go	/^	tickRate chan float64$/;"	m	struct:events.EventSystem
title	news.go	/^	title   string$/;"	m	struct:main.story
unspool	common/simpleGraph/simpleGraph.go	/^func (g *graph) unspool(start node, searcher Agent) (out path) {$/;"	f	unknown:simpleGraph.graph
unspool	events/world/goapGraph.go	/^func (g *graph) unspool(start node, searcher Agent) (out path) {$/;"	f	unknown:world.graph
update	events/eventSystem.go	/^func (e *EventSystem) update() {$/;"	f	unknown:events.EventSystem
vertex	common/simpleGraph/simpleGraph.go	/^type vertex struct {$/;"	s	package:simpleGraph
vertex	events/world/goapGraph.go	/^type vertex struct {$/;"	s	package:world
visitors	events/world/places.go	/^	visitors        []ID$/;"	m	struct:world.place
w	events/eventSystem.go	/^	w        *w.World$/;"	m	struct:events.EventSystem
world	events/event.go	/^	world   *w.World$/;"	m	struct:events.event
world	events/world/World.go	/^package world$/;"	p
world	events/world/goals.go	/^package world$/;"	p
world	events/world/goapGraph.go	/^package world$/;"	p
world	events/world/group.go	/^package world$/;"	p
world	events/world/places.go	/^package world$/;"	p
world	events/world/subject.go	/^package world$/;"	p
world	events/world/worldConfig.go	/^package world$/;"	p
yamlLoader	data/yaml.go	/^type yamlLoader struct {$/;"	s	package:data
year	events/world/worldConfig.go	/^	year    int$/;"	m	struct:world.WorldConfig
