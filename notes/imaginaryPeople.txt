type person struct {
name name			| string | int	/
character *character		| trie?		|
relationships *relationships	| array		/
o the characters are all in an array
*
Specify array + map sizes...
//--------------------------------------------------------------//
character:
-- whether something is attempted --
0 0 0 0.0 0 0 0 ||     madness : stress    	// (0-16) 
0 0 0 0.0 0 0 0 || membership  : alignment 	// (0-16)
0 0 0 0 0 0 0 0 || traits      			// bools
0 0 0 0 0 0 0 0 || motivations             	// bools
-- 	whether it works 	  -- 
0 0 0 0 0 0 0 0 || disabilities			// bools
0 0 0 0.0 0 0 0 ||  stats  INT : WIL       	// (0-16)
0 0 0 0.0 0 0 0 || 	   STR : CON		 / "
0 0 0 0.0 0 0 0 || 	   CHA : HP		 / "
-- 	who they target 	 --
0 0 0 0 0 0 0 0 || uint8 - array index of character
0 0 0 0 0 0 0 0 || uint8 - " of hated
0 0 0 0 0 0 0 0 || uint8 - " of random
0 0 0 0 0 0 0 0 || uint8 - " of most liked
//--------------------------------------------------------------//

Place all the action-triggering characters in a sorted array (using 'sort') then use binary search to retrieve them...

These characteristics should all combine, so for instance: 
trait (hasOrders) + membership (police) would make it go to the part of the actions trie where the actions for the police are described...


So the characters are stored in an array 256 entries long // I'd rather have 256 complex characters than 65536 simple ones

Then when you want to read from this, you ask the controller for a copy-

so this block can determine eligibility for actions // and also record their results

16 organizations

so maybe you just don't care about the broader charactersitics of the people, you just perform the transformations on the character.


relationships:
0 0 0 0 0 0 0 0 0 || name : relationship 	{ 0 - hate
0 0 0 0 0 0 0 0 0 ||			 	  1 - dislike
0 0 0 0 0 0 0 0 0 ||			 	  2 - like
0 0 0 0 0 0 0 0 0 ||  			 	  3 - love    }
0 0 0 0 0 0 0 0 0 ||
0 0 0 0 0 0 0 0 0 ||  
0 0 0 0 0 0 0 0 0 ||

if a new relationship comes up, a non-zero or non-three relation is discarded

So the structure is basically:

An 256-entry array, containing uint64 // character stuff - the index of this serves as the name.

Another 256 entry array, containing uint32 // relationship stuff

Another 256 entry array, containing the less-used components of the character? For instance, the human-readable representations of the above data?

So it's all like a layer-cake. There's a read pass, where the characters are pushed through the 'actions' tree to see what they do. Then there's a write pass, where these actions are applied to relevant characters.
